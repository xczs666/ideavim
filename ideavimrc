" `:actionlist` command show all Intellij action. :-)
" https://github.com/JetBrains/ideavim/discussions/303
set clipboard+=unnamed,ideaput
let mapleader="\<Space>"
let maplocalleader=","
set notimeout
set timeoutlen=5000

set nocompatible              " be iMproved, required
set number
set relativenumber
set showcmd
set incsearch
set ignorecase
set smartcase " no ignore case when pattern is uppercase
set keep-english-in-normal
filetype off                  " required
""" IdeaVim options
" Smart join for <C-J>
set ideajoin
" Map vim marks to IDEA global marks
set ideamarks
" Define the mode that would be enabled during
"  the refactoring (renaming, live template, introduce variable, etc)
"     Use one of the following values:
"     - keep  - keep the mode that was enabled before starting a refactoring
"     - select - start refactoring in select mode
"     - visual - start refactoring in visual mode
set idearefactormode=keep

" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/vundle
"call vundle#rc()

"https://github.com/JetBrains/ideavim/wiki/NERDTree-support
":NERDTree
":NERDTreeFocus
":NERDTreeToggle
":NERDTreeClose
":NERDTreeFind
":NERDTreeRefreshRoot
"Key   | Description
"o     | Open files, directories and bookmarks
"O     | Recursively open the selected directory
"t     | Open selected node/bookmark in a new tab
"i     | Open selected file in a split window
"s     | Open selected file in a new vsplit
"x     | Close the current nodes parent
"X     | Recursively close all children of the current node
"P     | Jump to the root node
"p     | Jump to current nodes parent
"K     | Jump up inside directories at the current tree depth
"J     | Jump down inside directories at the current tree depth
"m     | Display the NERDTree menu
"q     | Close the NERDTree window
Plug 'preservim/nerdtree'
set NERDTree

" <A-n>, <A-x>, <A-p>, g<A-n>
" Plug 'terryma/vim-multiple-cursors'
set multiple-cursors

" ms/ mcr mcv mcd
set multicursor
"nmap q <Plug>(multicursor-ms/)
"nmap z <Plug>(multicursor-mcv)
nmap Z <Plug>(multicursor-mcr)

"" ys ysiw cs ds
Plug 'vim-surround'
set surround

Plug 'chrisbra/matchit'
set matchit

"cx, cxx, X, cxc
Plug 'vim-exchange'
set exchange
"" gr grr
Plug 'vim-scripts/ReplaceWithRegister'
set ReplaceWithRegister

set easymotion
" easymotion插件
" 忽略大小写
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)

"set sneak

" [count]gc{motion}, o_gc, v_gc, gcc
"Plug 'tpope/vim-commentary'

Plug 'vim-scripts/argtextobj.vim' " aa, ia

set which-key
" make the popup appear much slower
let g:WhichKey_DefaultDelay = 500

"""""""" map
inoremap jk <esc>
"inoremap <C-A> <Home>
"inoremap <C-E> <End>
inoremap <c-a> <c-o>^
inoremap <c-e> <c-o>$
inoremap <C-B> <Left>
"inoremap <C-J> <Down>
"inoremap <C-K> <Up>
inoremap <C-F> <Right>
"inoremap <C-\> <C-O>:action CodeCompletion<CR>
imap <C-\> <Action>(CodeCompletion)
nnoremap <C-\> :action CodeCompletion<CR>
"nnoremap <C-D> :action EditorDuplicate<CR>
"nnoremap <C-D> :action Compare.SameVersion<CR>
nnoremap <c-i> :action GotoImplementation<CR>
nnoremap <c-o> :action GotoSuperMethod<CR>
nnoremap <c-e> :action GotoPreviousError<CR>
nnoremap <c-d> :action GotoNextError<CR>
imap <c-d> <Action>(GotoNextError)
nnoremap <c-j> :action ShowIntentionActions<CR>
"imap <c-l> <Action>(ClassNameCompletion)
imap <c-l> <Action>(SmartTypeCompletion)
nnoremap <c-l> :action ClassNameCompletion<CR>
nnoremap <c-h> :action Refactorings.QuickListPopupAction<CR>
vnoremap <c-h> :action Refactorings.QuickListPopupAction<CR>
nnoremap <c-[> :action Back<CR>
nnoremap <c-k> :action FileStructurePopup<CR>
imap <c-r> <Action>(RenameElement)

"Move code up and down
inoremap <c-j> <Esc>:action MoveStatementDown<CR>i
inoremap <c-k> <Esc>:action MoveStatementUp<CR>i
vnoremap J :action MoveStatementDown<CR>
vnoremap K :action MoveStatementUp<CR>

"nnoremap <c-w> :action JumpToLastWindow<CR>
 noremap <c-w><c-w> :action NextSplitter<CR>

nmap [[ <Action>(MethodUp)
vmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
vmap ]] <Action>(MethodDown)

" Keys from vim-gitgutter
nmap ]g <Action>(VcsShowNextChangeMarker)
nmap [g <Action>(VcsShowPrevChangeMarker)
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =g <Action>(VcsShowCurrentChangeMarker)
nmap <leader>ga <Action>(Annotate)
nmap <leader>gb <Action>(Vcs.RollbackChangedLines)

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)

nmap <c-]> <Action>(GotoDeclaration)
"nmap gb <Action>(Back)
nmap gD <Action>(GotoTypeDeclaration)
"nmap gf <Action>(Forward)
nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gy <Action>(ShowErrorDescription)

"inoremap <c-l> <Esc>:action EditorCompleteStatement<CR>
nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
"nnoremap ,t :action TerminalOpenInTerminal<CR>
nnoremap <leader>q :action HideActiveWindow<CR>
nnoremap ,e :e ~/.ideavimrc<CR>
nnoremap ,r :action IdeaVim.ReloadVimRc.reload<CR>
"nnoremap ,m :action CMake.ReloadCMakeProject<CR>
"nnoremap <leader>km :action CMake.ReloadCMakeProject<CR>
"nnoremap ,b :action ShowNavBar<CR>

"nnoremap ,s :action FileStructurePopup<CR>
"nnoremap <leader>sp :action FileStructurePopup<CR>
let g:WhichKeyDesc_FileStructurePopup="<leader>sp FileStructurePopup"
nnoremap <leader>r :action RenameElement<CR>
let g:WhichKeyDesc_RenameElement="<leader>r RenameElement"
nnoremap <leader>kr :action Run<CR>
let g:WhichKeyDesc_Run="<leader>kr Run"
nnoremap <leader>kn :action ContextRun<CR>
let g:WhichKeyDesc_ContextRun="<leader>kn ContextRun"
nnoremap <leader>kc :action RunClass<CR>
let g:WhichKeyDesc_RunClass="<leader>kc RunClass"
nnoremap <leader>kf :action RerunFailedTests<CR>
let g:WhichKeyDesc_RerunFailedTests="<leader>kf RerunFailedTests"
nnoremap <leader>kh :action ChooseRunConfiguration<CR>
let g:WhichKeyDesc_ChooseRunConfiguration="<leader>kh ChooseRunConfiguration"
nnoremap <leader>kd :action ChooseDebugConfiguration<CR>
let g:WhichKeyDesc_ChooseDebugConfiguration="<leader>kd ChooseDebugConfiguration"

nnoremap ,f :action GotoFile<CR>
nnoremap ,a :action GotoAction<CR>
nnoremap <leader>h :action HideAllWindows<CR>
"nnoremap <leader>w :action GotoNextError<CR>
"nnoremap <leader>b :action GotoPreviousError<CR>
"nnoremap ge :action GotoNextError<CR>
"nnoremap gE :action GotoPreviousError<CR>
nnoremap ]e :action GotoNextError<CR>
nnoremap [e :action GotoPreviousError<CR>
noremap <leader>sw :action SurroundWith<CR>
nnoremap ,l :action RecentLocations<CR>
nnoremap ,h  :action LocalHistory.ShowHistory<CR>
"nnoremap <leader>u :action FindUsages<CR>
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>
"nnoremap <leader>u :action ShowUsages<CR>
nnoremap <leader>sk :action TypeHierarchy<CR>
nnoremap <leader>sj :action CallHierarchy<CR>

"Refactor
nnoremap <leader>t :action Refactorings.QuickListPopupAction<CR>
vnoremap <leader>t :action Refactorings.QuickListPopupAction<CR>
"nnoremap <leader>e :action ReformatCode<CR>
"nnoremap <leader>n :action Inline<CR>
"vnoremap <leader>n :action Inline<CR>
"nnoremap <leader>m :action ExtractMethod<CR>
"vnoremap <leader>m :action ExtractMethod<CR>
"nnoremap <leader>p :action IntroduceParameter<CR>
"nnoremap <leader>P :action ReplaceMethodWithMethodObject<CR> " 提取到内部类方法
"vnoremap <leader>P :action ReplaceMethodWithMethodObject<CR>
"nnoremap <leader>v :action IntroduceVariable<CR>
"vnoremap <leader>v :action IntroduceVariable<CR>
"nnoremap <leader>ec :action ExtractClass<CR>
"nnoremap <leader>eo :action Move<CR>
"nnoremap <leader>ei :action ExtractInterface<CR>
"nnoremap <leader>ef :action EncapsulateFields<CR>
"nnoremap <leader>ed :action MemberPushDown<CR>
"nnoremap <leader>eu :action MembersPullUp<CR>
"nnoremap <leader>ic :action IntroduceConstant<CR>
"nnoremap <leader>if :action IntroduceField<CR>
"nnoremap <leader>ip :action IntroduceParameterObject<CR>
"nnoremap <leader>st :action MakeStatic<CR>



nnoremap <leader>il :action Inline<CR>
vnoremap <leader>il :action Inline<CR>
let g:WhichKeyDesc_inline="<leader>il Inline"
nnoremap <leader>iv :action IntroduceVariable<CR>
vnoremap <leader>iv :action IntroduceVariable<CR>
let g:WhichKeyDesc_introduce_variable="<leader>iv IntroduceVariable"
nnoremap <leader>ip :action IntroduceParameter<CR>
let g:WhichKeyDesc_introduce_parameter="<leader>ip IntroduceParameter"
nnoremap <leader>iF :action IntroduceFunctionalParameter<CR>
let g:WhichKeyDesc_introduce_functional_parameter="<leader>iF IntroduceFunctionalParameter"
nnoremap <leader>io :action IntroduceParameterObject<CR>
let g:WhichKeyDesc_introduce_parameter_object="<leader>io IntroduceParameterObject"
nnoremap <leader>if :action IntroduceField<CR>
let g:WhichKeyDesc_introduce_field="<leader>if IntroduceField"
nnoremap <leader>ic :action IntroduceConstant<CR>
let g:WhichKeyDesc_introduce_constant="<leader>ic IntroduceConstant"
nnoremap <leader>em :action ExtractMethod<CR>
vnoremap <leader>em :action ExtractMethod<CR>
let g:WhichKeyDesc_extract_method="<leader>em ExtractMethod"
nnoremap <leader>eo :action ReplaceMethodWithMethodObject<CR> " 提取到内部类方法
vnoremap <leader>eo :action ReplaceMethodWithMethodObject<CR>
let g:WhichKeyDesc_replace_method_with_method_object="<leader>eo ReplaceMethodWithMethodObject"
nnoremap <leader>ec :action ExtractClass<CR>
let g:WhichKeyDesc_extract_class="<leader>ec ExtractClass"
nnoremap <leader>es :action ExtractSuperclass<CR>
let g:WhichKeyDesc_extract_superclass="<leader>es ExtractSuperclass"
nnoremap <leader>ei :action ExtractInterface<CR>
let g:WhichKeyDesc_extract_interface="<leader>ei ExtractInterface"
nnoremap <leader>ef :action EncapsulateFields<CR>
let g:WhichKeyDesc_encapsulate_fields="<leader>ef EncapsulateFields"
nnoremap <leader>mv :action Move<CR>
vnoremap <leader>mv :action Move<CR>
let g:WhichKeyDesc_move="<leader>mv Move"
nnoremap <leader>mu :action MembersPullUp<CR>
vnoremap <leader>mu :action MembersPullUp<CR>
let g:WhichKeyDesc_member_pull_up="<leader>mu MembersPullUp"
nnoremap <leader>md :action MemberPushDown<CR>
vnoremap <leader>md :action MemberPushDown<CR>
let g:WhichKeyDesc_member_push_down="<leader>md MemberPushDown"
nnoremap <leader>ai :action AnonymousToInner<CR>
vnoremap <leader>ai :action AnonymousToInner<CR>
let g:WhichKeyDesc_anonymous_to_inner="<leader>ai AnonymousToInner"

nnoremap <leader>ms :action MakeStatic<CR>
let g:WhichKeyDesc_make_static="<leader>ms MakeStatic"



"nnoremap <leader>RF :action RenameFile<CR>
nnoremap <leader>cs :action ChangeSignature<CR>

"""""""""""""""""""Jump articles"""""""""""""""""""""""""""
nnoremap gc gg:action MethodDown<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gt :action GotoTest<CR>

"nnoremap ,f :action FindInPath<CR>


""""""""""""""""""""""""""""""""""""""Information""""""""""""""""""""""""""""""""""""""
"nnoremap <leader>i :action ShowIntentionActions<CR>
nnoremap <leader>ed :action ShowErrorDescription<CR>
"nnoremap <leader>ti :action ExpressionTypeInfo<CR>
nnoremap <leader>pi :action ParameterInfo<CR>
nnoremap <leader>jd :action QuickJavaDoc<CR>
"nnoremap <leader>fs mm`m:action FileStructurePopup<CR>
nnoremap <leader>sd :action ShowUmlDiagram<CR>
nnoremap <leader>ch :action CallHierarchy<CR>
"nnoremap <leader>fu :action FindUsages<CR>
nnoremap <leader>su :action ShowUsages<CR>
nnoremap <leader>mh :action MethodHierarchy<CR>
"nnoremap <leader>ss :action ShowSettings<CR>

""""""""""""""""""""""""""""""""""" bookmarks and buffer """""""""""""""""""""""""""""""
nnoremap ,bb :action Bookmarks<CR>
nnoremap ,bs :action ShowBookmarks<CR>
nnoremap ,bt :action ToggleBookmark<CR>
nnoremap ,bf :action AddToFavorites<CR>
nnoremap ,bn :action GotoNextBookmark<CR>
nnoremap ,bp :action GotoPreviousBookmark<CR>


if &ide =~? 'intellij idea'
elseif &ide =~? 'clion'
  nnoremap <leader>v :action CIDR.Lang.IntroduceVariable<CR>
elseif &ide =~? 'android studio'
  nnoremap <leader>kn :action RunContextGroup<CR>
  nnoremap ,n :action RunContextGroup<CR>
endif

" NERDTree
nnoremap ,t :NERDTreeFind<CR>

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-x> <Plug>NextWholeOccurrence
xmap <C-x> <Plug>NextWholeOccurrence
nmap g<C-x> <Plug>NextOccurrence
xmap g<C-x> <Plug>NextOccurrence
xmap <C-s> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. ñ
nmap ,<C-x> <Plug>AllWholeOccurrences
xmap ,<C-x> <Plug>AllWholeOccurrences
nmap ,g<C-x> <Plug>AllOccurrences
xmap ,g<C-x> <Plug>AllOccurrences


" CamelCaseMotion approximation (obsolete with proper CamelCaseMotoin plugin)
" Missing inner word motions e.g. i,w
" nmap ,w [w
" nmap ,b [b
" nmap ,e ]w
" nmap ,ge ]b


function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last',
                 \'isEmpty', 'isNotEmpty', 'isNull', 'isNotNull', 'isSuccess', 'isFail']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction


" 翻转关键字
nnoremap ! :call Invert(0)<CR>
" 指定部分字符翻转
vnoremap ! :<C-u>call Invert(1)<CR>
" 删除方法 ap-段落
nnoremap dam :action MethodUp<CR>f{vi{:g/^$/d<CR>dap
let g:WhichKeyDesc_delete_method="dam delete method"
" surround
nmap S ysiW


""""""""""""""""""""customer java map""""""""""""""""""""""""""
" 为属性增加@Autowired
nnoremap <leader>aw :s/\v( +)private( final \| )([A-z_]+) ([A-z0-9_]+).*;/\1@Autowired\r\1private \3 \4;/<CR>
vnoremap <leader>aw :s/\v( +)private( final \| )([A-z_]+) ([A-z0-9_]+).*;/\1@Autowired\r\1private \3 \4;/<CR>
let g:WhichKeyDesc_autowired="<leader>aw add @Autowired and format"
" 跳转到自己类上
nnoremap [c gg:action MethodDown<CR>
let g:WhichKeyDesc_goto_own_class="[c goto own class"
" class add annotation
nmap <leader>aa [cO
let g:WhichKeyDesc_add_annotation="<leader>aa add annotation"
" class add field
nmap <leader>af [co
let g:WhichKeyDesc_add_field="<leader>af add field"
nmap <leader>ac [cO@Component<Esc>
let g:WhichKeyDesc_add_component="<leader>ac add @Component"
nmap <leader>as [cO@Service<Esc>
let g:WhichKeyDesc_add_service="<leader>as add @Service"
nmap <leader>al [cO@Slf4j<Esc>
let g:WhichKeyDesc_add_log="<leader>al add @Slf4j"
nmap <leader>ai [ct{i
let g:WhichKeyDesc_add_implements="<leader>ai add implements"
nnoremap <leader>fu bbdiwxxxx~wxxb
let g:WhichKeyDesc_variable_unwrap="<leader>fu variable unwrap"
nnoremap <leader>fa yiwgg:action MethodDown<CR>o@Autowired<Enter>private <Esc>pb~A <Esc>pA;<Esc>``
let g:WhichKeyDesc_variable_to_field="<leader>fa variable to field"
nnoremap g= :action ReformatCode<CR>:action OptimizeImports<CR>
let g:WhichKeyDesc_format_file="g= format file"
nnoremap <leader>pn /[,)]<CR>bb
let g:WhichKeyDesc_next_parameter="<leader>pn next parameter"
" 寄存器，宏t 全参构造器转为builder
let @t="0jddkPj0:s/^[ ,]*//<CR>v/\\(, \\\|$\\)<CR>hdkt=i(<Esc>pa)<Esc>ld$:s/^\\( *\\)this/\\1/<CR>j0"

nnoremap <silent> vv <C-w>v

" easy javadoc
nnoremap <leader>dg :action javadoc.generator<CR>
nmap <leader>da [c<Action>(javadoc.generatorAll)

""" IdeaVim development stuff
set ideastrictmode

