" `:actionlist` command show all Intellij action. :-)
" https://github.com/JetBrains/ideavim/discussions/303
" 基础键位说明
"=============================================================
"=============================================================
" M->cmd, S-shift, A->win option, D->mac option, C->control
" <ESC> - escape, <BS> - backspace
let mapleader="\<Space>"
let maplocalleader=","

"=============================================================
" 基础设置
"=============================================================
set clipboard+=unnamed,ideaput
set notimeout
set timeoutlen=5000

"垂直滚动时，光标距离顶部/底部的位置(单位：行)
set scrolloff=5
"禁用错误提示音
set visualbell
set noerrorbells
" 当“on”时，一些命令将光标移动到该行的第一个非空白处。 关闭时，光标将保留在同一列中（如果可能）
set startofline=on
set nocompatible              " be iMproved, required
set number
set relativenumber
set showcmd
set incsearch
set ignorecase
set smartcase " no ignore case when pattern is uppercase
" 显示匹配括号
set showmatch
set keep-english-in-normal
filetype off                  " required
""" IdeaVim options
" Smart join for <C-J>
set ideajoin
" Map vim marks to IDEA global marks
set ideamarks
" Define the mode that would be enabled during
"  the refactoring (renaming, live template, introduce variable, etc)
"     Use one of the following values:
"     - keep  - keep the mode that was enabled before starting a refactoring
"     - select - start refactoring in select mode
"     - visual - start refactoring in visual mode
set idearefactormode=keep

" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/vundle
"call vundle#rc()

"https://github.com/JetBrains/ideavim/wiki/NERDTree-support
":NERDTree
":NERDTreeFocus
":NERDTreeToggle
":NERDTreeClose
":NERDTreeFind
":NERDTreeRefreshRoot
"Key   | Description
"o     | Open files, directories and bookmarks
"O     | Recursively open the selected directory
"t     | Open selected node/bookmark in a new tab
"i     | Open selected file in a split window
"s     | Open selected file in a new vsplit
"x     | Close the current nodes parent
"X     | Recursively close all children of the current node
"P     | Jump to the root node
"p     | Jump to current nodes parent
"K     | Jump up inside directories at the current tree depth
"J     | Jump down inside directories at the current tree depth
"m     | Display the NERDTree menu
"q     | Close the NERDTree window
Plug 'preservim/nerdtree'

" <A-n>, <A-x>, <A-p>, g<A-n>
 Plug 'terryma/vim-multiple-cursors'
"set multiple-cursors

"" ms/ mcr mcv mcd
"set multicursor
""nmap q <Plug>(multicursor-ms/)
""nmap z <Plug>(multicursor-mcv)
"nmap Z <Plug>(multicursor-mcr)

"" ys ysiw cs ds
Plug 'vim-surround'

Plug 'chrisbra/matchit'

"cx, cxx, X, cxc
Plug 'vim-exchange'
"set exchange

"" gr grr
Plug 'vim-scripts/ReplaceWithRegister'
"set ReplaceWithRegister

Plug 'easymotion/vim-easymotion'
" set easymotion
" easymotion插件
" 忽略大小写
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)
let g:EasyMotion_override_acejump = 0

"set sneak

" [count]gc{motion}, o_gc, v_gc, gcc
"Plug 'tpope/vim-commentary'

"文本对象编辑 https://www.vim.org/scripts/script.php?script_id=2699
Plug 'vim-scripts/argtextobj.vim' " aa, ia
let g:argtextobj_pairs="[:],(:),<:>"

" IdeaVim-Quickscope plugin.高亮f,t
set quickscope

set which-key
" make the popup appear much slower
let g:WhichKey_DefaultDelay = 500

"""""""" map
"noremap <Esc> <nop>
nmap <S-Enter> O<Esc>
"nmap <CR> o<Esc>
"visual 模式 下 按* 号 搜索 光标选中的内容(对已选中的内容进行查找)
vmap * "ry/<C-R>r<CR>
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
vmap n nzz
vmap N Nzz
nnoremap n nzzzv
nnoremap N Nzzzv
" Go to the first non-blank character of a line
noremap 0 ^
" Just in case you need to go to the very beginning of a line
noremap ^ 0
"inoremap <C-A> <Home>
"inoremap <C-E> <End>
inoremap <c-a> <c-o>^
inoremap <c-e> <c-o>$
inoremap <C-B> <Left>
"inoremap <C-J> <Down>
"inoremap <C-K> <Up>
inoremap <C-F> <Right>

"=============================================================
" 个人习惯
"=============================================================
nmap <leader><leader> <Action>(AceAction)
"选中引号内
nmap <Leader>v vi"
"inoremap <C-\> <C-O>:action CodeCompletion<CR>
"imap <C-\> <Action>(CodeCompletion)
"nnoremap <C-\> :action CodeCompletion<CR>
"imap <C-Space> <Action>(SmartTypeCompletion)
"nnoremap <C-Space> :action SmartTypeCompletion<CR>
"nnoremap <C-D> :action EditorDuplicate<CR>
"nnoremap <C-D> :action Compare.SameVersion<CR>
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)
"nnoremap <D-[> :action GotoImplementation<CR>
nmap <C-]> <Action>(GotoDeclaration)
nmap <C-[> <Action>(GotoTypeDeclaration)
nmap gd <Action>(GotoTypeDeclaration)
nmap <C-j> <Action>(GotoImplementation)
"nmap <C-l> <Action>(AceAction)
nnoremap ]e :action GotoNextError<CR>
nnoremap [e :action GotoPreviousError<CR>
nmap <C-D-n> <Action>(GotoNextElementUnderCaretUsage)
nmap <C-D-p> <Action>(GotoPrevElementUnderCaretUsage)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)
imap <c-d> <Action>(GotoNextError)
nnoremap <c-s> :action ShowIntentionActions<CR>
"imap <c-l> <Action>(ClassNameCompletion)
"imap <c-l> <Action>(SmartTypeCompletion)
"nnoremap <c-l> :action ClassNameCompletion<CR>
imap <c-cr> <Action>(CodeCompletion)
nnoremap <c-cr> :action CodeCompletion<CR>
imap <C-S-CR> <Action>(SmartTypeCompletion)
nnoremap <C-S-CR> :action SmartTypeCompletion<CR>
nnoremap <c-h> :action Refactorings.QuickListPopupAction<CR>
vnoremap <c-h> :action Refactorings.QuickListPopupAction<CR>
"nnoremap <c-[> :action Back<CR>
"nnoremap <c-k> :action FileStructurePopup<CR>
"Move code up and down
inoremap <c-j> <Esc>:m +1<CR>gi
inoremap <c-k> <Esc>:m -2<CR>gi
"inoremap <c-j> <Esc>:action MoveStatementDown<CR>i
"inoremap <c-k> <Esc>:action MoveStatementUp<CR>i
vnoremap J :action MoveStatementDown<CR>
vnoremap K :action MoveStatementUp<CR>

"nnoremap <c-w> :action JumpToLastWindow<CR>
 noremap <c-w><c-w> :action NextSplitter<CR>

nmap [[ <Action>(MethodUp)
vmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
vmap ]] <Action>(MethodDown)

" Keys from vim-gitgutter
nmap ]g <Action>(VcsShowNextChangeMarker)
nmap [g <Action>(VcsShowPrevChangeMarker)
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =g <Action>(VcsShowCurrentChangeMarker)
nmap <leader>ga <Action>(Annotate)
nmap <leader>sp <Action>(FileStructurePopup)
nmap <leader>gb <Action>(Vcs.RollbackChangedLines)
nmap <leader>gh <Action>(Vcs.ShowTabbedFileHistory)
vmap <leader>gh <Action>(Vcs.ShowHistoryForBlock)
nmap <leader>gi <Action>(Gitflow.InitRepo)
nmap <leader>gf <Action>(Gitflow.OpenGitflowPopup)

nnoremap ma mA
nnoremap 'a 'A
nnoremap 'a 'A
nnoremap ms mS
nnoremap 's 'S
nnoremap 's 'S
nnoremap md mD
nnoremap 'd 'D
nnoremap 'd 'D


" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
" nmap <c-s-]> <Action>(GotoNextElementUnderCaretUsage)
" nmap <c-s-[> <Action>(GotoPrevElementUnderCaretUsage)
nnoremap <c-d-9> ?[<(]<CR>
nnoremap <c-d-0> /[>)]<CR>
nnoremap <c-d--> %
imap <D-i> <Action>(EditorContextInfo)
nmap <D-i> <Action>(EditorContextInfo)
imap <D-p> <Action>(ParameterInfo)
nmap <D-p> <Action>(ParameterInfo)

" nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gy <Action>(ShowErrorDescription)

"inoremap <c-l> <Esc>:action EditorCompleteStatement<CR>
nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
"nnoremap ,t :action TerminalOpenInTerminal<CR>
nnoremap <leader>q :action HideActiveWindow<CR>
"nmap <c-m> <Action>(HideSideWindows)
nnoremap ,e :e ~/.ideavimrc<CR>
nnoremap ,r :action IdeaVim.ReloadVimRc.reload<CR>
"nnoremap ,m :action CMake.ReloadCMakeProject<CR>
"nnoremap <leader>km :action CMake.ReloadCMakeProject<CR>
"nnoremap ,b :action ShowNavBar<CR>

"nnoremap ,s :action FileStructurePopup<CR>
"nnoremap <leader>sp :action FileStructurePopup<CR>
let g:WhichKeyDesc_FileStructurePopup="<leader>sp FileStructurePopup"
nnoremap <leader>r :action RenameElement<CR>
let g:WhichKeyDesc_RenameElement="<leader>r RenameElement"
nnoremap <leader>ks :action Stop<CR>
nnoremap <leader>kpr :action Run<CR>
let g:WhichKeyDesc_Run="<leader>kpr Run"
nnoremap <leader>kpd :action Debug<CR>
let g:WhichKeyDesc_Debug="<leader>kpd Debug"
nnoremap <leader>kmd :action ContextDebug<CR>
let g:WhichKeyDesc_ContextDebug="<leader>kmd ContextDebug"
nnoremap <leader>kmr :action ContextRun<CR>
let g:WhichKeyDesc_ContextRun="<leader>kmr ContextRun"
nnoremap <leader>krc :action RunClass<CR>
let g:WhichKeyDesc_RunClass="<leader>krc RunClass"
nnoremap <leader>kf :action RerunFailedTests<CR>
let g:WhichKeyDesc_RerunFailedTests="<leader>kf RerunFailedTests"
nnoremap <leader>kcr :action ChooseRunConfiguration<CR>
let g:WhichKeyDesc_ChooseRunConfiguration="<leader>kcr ChooseRunConfiguration"
nnoremap <leader>kcd :action ChooseDebugConfiguration<CR>
let g:WhichKeyDesc_ChooseDebugConfiguration="<leader>kcd ChooseDebugConfiguration"
nnoremap <leader>po :action ToggleLineBreakpoint<CR>
nnoremap <leader>pv :action ViewBreakpoints<CR>


nmap <leader>ma <Action>(Maven.ExecuteGoal)

nnoremap ,f :action GotoFile<CR>
nnoremap ,a :action GotoAction<CR>
nnoremap <leader>hw :action HideSideWindows<CR>
"nnoremap <leader>w :action GotoNextError<CR>
"nnoremap <leader>b :action GotoPreviousError<CR>
"nnoremap ge :action GotoNextError<CR>
"nnoremap gE :action GotoPreviousError<CR>
noremap <leader>sw :action SurroundWith<CR>
nnoremap ,l :action RecentLocations<CR>
nnoremap ,h  :action LocalHistory.ShowHistory<CR>
"nnoremap <leader>u :action FindUsages<CR>
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>
"nnoremap <leader>u :action ShowUsages<CR>
nnoremap <leader>sk :action TypeHierarchy<CR>
nnoremap <leader>sj :action CallHierarchy<CR>

"Refactor
nnoremap <leader>t :action Refactorings.QuickListPopupAction<CR>
vnoremap <leader>t :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>ff :action ReformatCode<CR>
"nnoremap <leader>n :action Inline<CR>
"vnoremap <leader>n :action Inline<CR>
"nnoremap <leader>m :action ExtractMethod<CR>
"vnoremap <leader>m :action ExtractMethod<CR>
"nnoremap <leader>p :action IntroduceParameter<CR>
"nnoremap <leader>P :action ReplaceMethodWithMethodObject<CR> " 提取到内部类方法
"vnoremap <leader>P :action ReplaceMethodWithMethodObject<CR>
"nnoremap <leader>v :action IntroduceVariable<CR>
"vnoremap <leader>v :action IntroduceVariable<CR>
"nnoremap <leader>ec :action ExtractClass<CR>
"nnoremap <leader>eo :action Move<CR>
"nnoremap <leader>ei :action ExtractInterface<CR>
"nnoremap <leader>ef :action EncapsulateFields<CR>
"nnoremap <leader>ed :action MemberPushDown<CR>
"nnoremap <leader>eu :action MembersPullUp<CR>
"nnoremap <leader>ic :action IntroduceConstant<CR>
"nnoremap <leader>if :action IntroduceField<CR>
"nnoremap <leader>ip :action IntroduceParameterObject<CR>
"nnoremap <leader>st :action MakeStatic<CR>


" 选择模式扩大选择范围
vmap v <Action>(EditorSelectWord)
" 选择模式缩小选择范围
vmap V <Action>(EditorUnSelectWord)
" 打开最近项目
"nmap <Leader>sf <Action>(RecentProjectListGroup)
nmap <leader>sf <Action>(FrameSwitchAction)
nnoremap <leader>hl :action HighlightUsagesInFile<CR>
vnoremap <leader>hl :action HighlightUsagesInFile<CR>
let g:WhichKeyDesc_inline="<leader>hl HighlightUsagesInFile"
nnoremap <leader>il :action Inline<CR>
vnoremap <leader>il :action Inline<CR>
let g:WhichKeyDesc_inline="<leader>il Inline"
nnoremap <leader>iv :action IntroduceVariable<CR>
vnoremap <leader>iv :action IntroduceVariable<CR>
let g:WhichKeyDesc_introduce_variable="<leader>iv IntroduceVariable"
nnoremap <leader>ip :action IntroduceParameter<CR>
let g:WhichKeyDesc_introduce_parameter="<leader>ip IntroduceParameter"
nnoremap <leader>iF :action IntroduceFunctionalParameter<CR>
let g:WhichKeyDesc_introduce_functional_parameter="<leader>iF IntroduceFunctionalParameter"
nnoremap <leader>io :action IntroduceParameterObject<CR>
let g:WhichKeyDesc_introduce_parameter_object="<leader>io IntroduceParameterObject"
nnoremap <leader>if :action IntroduceField<CR>
let g:WhichKeyDesc_introduce_field="<leader>if IntroduceField"
nnoremap <leader>ic :action IntroduceConstant<CR>
let g:WhichKeyDesc_introduce_constant="<leader>ic IntroduceConstant"
nnoremap <leader>em :action ExtractMethod<CR>
vnoremap <leader>em :action ExtractMethod<CR>
let g:WhichKeyDesc_extract_method="<leader>em ExtractMethod"
nnoremap <leader>eo :action ReplaceMethodWithMethodObject<CR> " 提取到内部类方法
vnoremap <leader>eo :action ReplaceMethodWithMethodObject<CR>
let g:WhichKeyDesc_replace_method_with_method_object="<leader>eo ReplaceMethodWithMethodObject"
nnoremap <leader>ec :action ExtractClass<CR>
let g:WhichKeyDesc_extract_class="<leader>ec ExtractClass"
nnoremap <leader>es :action ExtractSuperclass<CR>
let g:WhichKeyDesc_extract_superclass="<leader>es ExtractSuperclass"
nnoremap <leader>ei :action ExtractInterface<CR>
let g:WhichKeyDesc_extract_interface="<leader>ei ExtractInterface"
nnoremap <leader>ef :action EncapsulateFields<CR>
let g:WhichKeyDesc_encapsulate_fields="<leader>ef EncapsulateFields"
nnoremap <leader>mv :action Move<CR>
vnoremap <leader>mv :action Move<CR>
let g:WhichKeyDesc_move="<leader>mv Move"
nnoremap <leader>mu :action MembersPullUp<CR>
vnoremap <leader>mu :action MembersPullUp<CR>
let g:WhichKeyDesc_member_pull_up="<leader>mu MembersPullUp"
nnoremap <leader>md :action MemberPushDown<CR>
vnoremap <leader>md :action MemberPushDown<CR>
let g:WhichKeyDesc_member_push_down="<leader>md MemberPushDown"
nnoremap <leader>ai :action AnonymousToInner<CR>
vnoremap <leader>ai :action AnonymousToInner<CR>
let g:WhichKeyDesc_anonymous_to_inner="<leader>ai AnonymousToInner"

nnoremap <leader>ms :action MakeStatic<CR>
let g:WhichKeyDesc_make_static="<leader>ms MakeStatic"



"nnoremap <leader>RF :action RenameFile<CR>
nnoremap <leader>cs :action ChangeSignature<CR>

"""""""""""""""""""Jump articles"""""""""""""""""""""""""""
nnoremap gc gg:action MethodDown<CR>
nnoremap gl :action GotoImplementation<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap ge :action GotoTest<CR>

"nnoremap ,f :action FindInPath<CR>


""""""""""""""""""""""""""""""""""""""Information""""""""""""""""""""""""""""""""""""""
"nnoremap <leader>i :action ShowIntentionActions<CR>
nnoremap <leader>ed :action ShowErrorDescription<CR>
"nnoremap <leader>ti :action ExpressionTypeInfo<CR>
nnoremap <leader>pi :action ParameterInfo<CR>
nnoremap <leader>jd :action QuickJavaDoc<CR>
"nnoremap <leader>fs mm`m:action FileStructurePopup<CR>
nnoremap <leader>sd :action ShowUmlDiagram<CR>
nnoremap <leader>ch :action CallHierarchy<CR>
"nnoremap <leader>fu :action FindUsages<CR>
nnoremap <leader>su :action ShowUsages<CR>
nnoremap <leader>mh :action MethodHierarchy<CR>
"nnoremap <leader>ss :action ShowSettings<CR>

""""""""""""""""""""""""""""""""""" bookmarks and buffer """""""""""""""""""""""""""""""
nnoremap ,bb :action Bookmarks<CR>
nnoremap ,bs :action ShowBookmarks<CR>
nnoremap ,bt :action ToggleBookmark<CR>
nnoremap ,bf :action AddToFavorites<CR>
nnoremap ,bn :action GotoNextBookmark<CR>
nnoremap ,bp :action GotoPreviousBookmark<CR>


if &ide =~? 'intellij idea'
elseif &ide =~? 'clion'
  nnoremap <leader>v :action CIDR.Lang.IntroduceVariable<CR>
elseif &ide =~? 'android studio'
  nnoremap <leader>kn :action RunContextGroup<CR>
  nnoremap ,n :action RunContextGroup<CR>
endif

" NERDTree
nnoremap ,t :NERDTreeFind<CR>

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-x> <Plug>NextWholeOccurrence
xmap <C-x> <Plug>NextWholeOccurrence
nmap g<C-x> <Plug>NextOccurrence
xmap g<C-x> <Plug>NextOccurrence
"xmap <C-s> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. ñ
nmap ,<C-x> <Plug>AllWholeOccurrences
xmap ,<C-x> <Plug>AllWholeOccurrences
nmap ,g<C-x> <Plug>AllOccurrences
xmap ,g<C-x> <Plug>AllOccurrences


" CamelCaseMotion approximation (obsolete with proper CamelCaseMotoin plugin)
" Missing inner word motions e.g. i,w
" nmap ,w [w
" nmap ,b [b
" nmap ,e ]w
" nmap ,ge ]b

" plugin StringManipulation
" crc camelCase
nnoremap <leader>crc :action StringManipulation.ToCamelCase<CR>
vnoremap <leader>crc :action StringManipulation.ToCamelCase<CR>
" crm MixedCase
nnoremap <leader>crm :action StringManipulation.ToPascalCase<CR>
vnoremap <leader>crm :action StringManipulation.ToPascalCase<CR>
" crs snake_case
nnoremap <leader>crs :action StringManipulation.ToSnakeCase<CR>
vnoremap <leader>crs :action StringManipulation.ToSnakeCase<CR>
" cru UPPER_CASE
nnoremap <leader>cru :action StringManipulation.ToScreamingSnakeCase<CR>
vnoremap <leader>cru :action StringManipulation.ToScreamingSnakeCase<CR>
" cr- dash-case
nnoremap <leader>cru :action StringManipulation.ToKebabCase<CR>
vnoremap <leader>cru :action StringManipulation.ToKebabCase<CR>

nmap <leader>cl <Action>(RestfulTool.action.OptionForEditor-CopyApiPath)
nmap <leader>sl <Action>(ActivateEndpointsToolWindow)


function! ToggleIsNot()
    " let l:word = expand('<cword>')
    normal "wyiw
    let l:word = @w
    if l:word[0:4] ==# 'isNot'
        let l:new_word = 'is' . l:word[5:]
    elseif l:word[0:1] ==# 'is'
        let l:new_word = 'isNot' . l:word[2:]
    else
        echo "No matching prefix found."
        return
    endif

    execute "normal ciw" . l:new_word
endfunction

function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last',
                 \'isEmpty', 'isNotEmpty', 'isNull', 'isNotNull', 'isSuccess', 'isFail']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction


" 翻转关键字
"nnoremap ! :call Invert(0)<CR>
nnoremap ! :call ToggleIsNot()<CR>
" 指定部分字符翻转
vnoremap ! :<C-u>call Invert(1)<CR>
" 单词跳转
nnoremap <leader>w [w
nnoremap <leader>b [b
" 删除方法 ap-段落
nnoremap dam :action MethodUp<CR>f{vi{:g/^$/d<CR>dap
let g:WhichKeyDesc_delete_method="dam delete method"
" surround
nmap S ysiW


""""""""""""""""""""customer java map""""""""""""""""""""""""""
" 为属性增加@Autowired
nnoremap <leader>aw :s/\v( +)private( final \| )([A-z_]+) ([A-z0-9_]+).*;/\1@Autowired\r\1private \3 \4;/<CR>
vnoremap <leader>aw :s/\v( +)private( final \| )([A-z_]+) ([A-z0-9_]+).*;/\1@Autowired\r\1private \3 \4;/<CR>
let g:WhichKeyDesc_autowired="<leader>aw add @Autowired and format"
" 跳转到自己类上
nnoremap [c gg:action MethodDown<CR>
let g:WhichKeyDesc_goto_own_class="[c goto own class"
" class add annotation
nmap <leader>aa [cO
let g:WhichKeyDesc_add_annotation="<leader>aa add annotation"
" class add field
nmap <leader>af [co
let g:WhichKeyDesc_add_field="<leader>af add field"
nmap <leader>ac [cO@Component<Esc>
let g:WhichKeyDesc_add_component="<leader>ac add @Component"
nmap <leader>as [cO@Service<Esc>
let g:WhichKeyDesc_add_service="<leader>as add @Service"
nmap <leader>al [cO@Slf4j<Esc>
let g:WhichKeyDesc_add_log="<leader>al add @Slf4j"
nmap <leader>ai [ct{i
let g:WhichKeyDesc_add_implements="<leader>ai add implements"
nnoremap <leader>fu bbdiwxxxx~wxxb
let g:WhichKeyDesc_variable_unwrap="<leader>fu variable unwrap"
nnoremap <leader>Fm F=w
let g:WhichKeyDesc_back_forward_method="<leader>Fm back forward method"
nnoremap <leader>fm f=w
let g:WhichKeyDesc_forward_method="<leader>fm forward method"
nnoremap <leader>fa yiwgg:action MethodDown<CR>o@Autowired<Enter>private <Esc>pb~A <Esc>pA;<Esc>``
let g:WhichKeyDesc_variable_to_field="<leader>fa variable to field"
nnoremap g= :action ReformatCode<CR>:action OptimizeImports<CR>
let g:WhichKeyDesc_format_file="g= format file"
nnoremap <leader>pn /[,)]<CR>bb
let g:WhichKeyDesc_next_parameter="<leader>pn next parameter"
" 寄存器，宏t 全参构造器转为builder
let @t="0jddkPj0:s/^[ ,]*//<CR>v/\\(, \\\|$\\)<CR>hdkt=i(<Esc>pa)<Esc>ld$:s/^\\( *\\)this/\\1/<CR>j0"

nnoremap <silent> vv <C-w>v

" easy javadoc
nnoremap <leader>dg :action javadoc.generator<CR>
nmap <leader>da [c<Action>(javadoc.generatorAll)

""" IdeaVim development stuff
set ideastrictmode

"=============================================================
" 默认键位配置
"=============================================================
" IEDA
sethandler <C-;> a:ide
sethandler <M-i> a:ide
sethandler <C-n> a:IDE
sethandler <C-p> a:IDE

"=============================================================
" 默认键位配置
"=============================================================